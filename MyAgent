import java.awt.Point;
import java.util.ArrayList;
import aicapn.AiCapn;
import aicapn.bot.Bot;
import aicapn.exceptions.OutOfThisWorldException;

public class MyAgent extends Bot
{
	
    public static void main(String[] args)
    {
    	// Create the AiCapn game object
        AiCapn game=new AiCapn();
        // Attach your agent to the game
        game.attach(new MyAgent());
        // Begin the game
        game.begin();
    }
    
    public MyAgent()
    {
    	super();
    	// assigns the name of your agent
    	name = "Bits_Please!";
    }
    
    /**
     * Retrieves the path from a start to and end location
     * @param start x and y coordinate of starting location represented as a Point object
     * @param end x and y coordinate of end location represented as a Point object
     * @return path from the start to end location represented as an ArrayList of Point objects
     */
    public ArrayList<Point> getPath(Point start, Point end)
    {
    	ArrayList<Point> path = new ArrayList<>();
	  	ArrayList<Point> open = new ArrayList<>();
    	ArrayList<Point> closed = new ArrayList<>();
    	
    	try
    	{	
    		path = closed;
        	open.add(start);
        	while(!open.isEmpty())
        	{
        		Point x = open.remove(0);
        		if (x.x == end.x && x.y == end.y)
        		{
        			closed.add(x);
        			return path;
        		}
        		else 
        		{
        			Point child_left = new Point(x.x - 1, x.y);
        			Point child_right = new Point(x.x + 1, x.y);
        			Point child_up = new Point(x.x, x.y - 1);
        			Point child_down = new Point(x.x, x.y +1);	
        			closed.add(x);
        			int left = (int)child_left.distance(end);
        			int right = (int) child_right.distance(end);
        			int up = (int) child_up.distance(end);
        			int down = (int) child_down.distance(end);
        			
        			int coordinate [] = {left, right, up, down};
        			sort(coordinate, 4);
        			// 0
        			if(coordinate[0] == left) {
        				if(child_left.x >= 0 && child_left.x < world.getMaxWidth() &&
        						child_left.y >= 0 && child_left.y < world.getMaxWidth() &&
        						world.isPassable(child_left.x, child_left.y)) {
        					if(!open.contains(child_left) && !closed.contains(child_left) ) {
        						open.add(0,child_left);
        					}
        				}
        			}else if(coordinate[0] == right) {
        				if(child_right.x >= 0 && child_right.x < world.getMaxWidth() &&
        						child_right.y >= 0 && child_right.y < world.getMaxWidth() &&
        						world.isPassable(child_right.x, child_right.y)) {
        					if(!open.contains(child_right) && !closed.contains(child_right) ) {
        						open.add(0,child_right);
        					}
        				}
        			}else if(coordinate[0] == up) {
        				if(child_up.x >= 0 && child_up.x < world.getMaxWidth() &&
        						child_up.y >= 0 && child_up.y < world.getMaxWidth() &&
        						world.isPassable(child_up.x, child_up.y)) {
        					if(!open.contains(child_up) && !closed.contains(child_up) ) {
        						open.add(0,child_up);
        					}
        				}
        			}else if(coordinate[0] == down) {
        				if(child_down.x >= 0 && child_down.x < world.getMaxWidth() &&
        						child_down.y >= 0 && child_down.y < world.getMaxWidth() &&
        						world.isPassable(child_down.x, child_down.y)) {
        					if(!open.contains(child_down) && !closed.contains(child_down) ) {
        						open.add(0,child_down);
        					}
        				}
        			}
        			//1
        			if(coordinate[1] == left) {
        				if(child_left.x >= 0 && child_left.x < world.getMaxWidth() &&
        						child_left.y >= 0 && child_left.y < world.getMaxWidth() &&
        						world.isPassable(child_left.x, child_left.y)) {
        					if(!open.contains(child_left) && !closed.contains(child_left) ) {
        						open.add(1,child_left);
        					}
        				}
        			}else if(coordinate[1] == right) {
        				if(child_right.x >= 0 && child_right.x < world.getMaxWidth() &&
        						child_right.y >= 0 && child_right.y < world.getMaxWidth() &&
        						world.isPassable(child_right.x, child_right.y)) {
        					if(!open.contains(child_right) && !closed.contains(child_right) ) {
        						open.add(1,child_right);
        					}
        				}
        			}else if(coordinate[1] == up) {
        				if(child_up.x >= 0 && child_up.x < world.getMaxWidth() &&
        						child_up.y >= 0 && child_up.y < world.getMaxWidth() &&
        						world.isPassable(child_up.x, child_up.y)) {
        					if( !open.contains(child_up) && !closed.contains(child_up) ) {
        						open.add(1,child_up);
        					}
        				}
        			}else if(coordinate[1] == down) {
        				if(child_down.x >= 0 && child_down.x < world.getMaxWidth() &&
        						child_down.y >= 0 && child_down.y < world.getMaxWidth() &&
        						world.isPassable(child_down.x, child_down.y)) {
        					if(!open.contains(child_down) && !closed.contains(child_down) ) {
        						open.add(1,child_down);
        					}
        				}
        			}
        			
        			//2
        			if(coordinate[2] == left) {
        				if(child_left.x >= 0 && child_left.x < world.getMaxWidth() &&
        						child_left.y >= 0 && child_left.y < world.getMaxWidth() &&
        						world.isPassable(child_left.x, child_left.y)) {
        					if(!open.contains(child_left) && !closed.contains(child_left) ) {
        						open.add(2, child_left);
        					}
        				}
        			}else if(coordinate[2] == right) {
        				if(child_right.x >= 0 && child_right.x < world.getMaxWidth() &&
        						child_right.y >= 0 && child_right.y < world.getMaxWidth() &&
        						world.isPassable(child_right.x, child_right.y)) {
        					if(!open.contains(child_right) && !closed.contains(child_right) ) {
        						open.add(2, child_right);
        					}
        				}
        			}else if(coordinate[2] == up) {
        				if(child_up.x >= 0 && child_up.x < world.getMaxWidth() &&
        						child_up.y >= 0 && child_up.y < world.getMaxWidth() &&
        						world.isPassable(child_up.x, child_up.y)) {
        					if(!open.contains(child_up) && !closed.contains(child_up) ) {
        						open.add(2, child_up);
        					}
        				}
        			}else if(coordinate[2] == down) {
        				if(child_down.x >= 0 && child_down.x < world.getMaxWidth() &&
        						child_down.y >= 0 && child_down.y < world.getMaxWidth() &&
        						world.isPassable(child_down.x, child_down.y)) {
        					if(!open.contains(child_down) && !closed.contains(child_down) ) {
        						open.add(2, child_down);
        					}
        				}
        			}
        			//3
        			if(coordinate[3] == left) {
        				if(child_left.x >= 0 && child_left.x < world.getMaxWidth() &&
        						child_left.y >= 0 && child_left.y < world.getMaxWidth() &&
        						world.isPassable(child_left.x, child_left.y)) {
        					if(!open.contains(child_left) && !closed.contains(child_left) ) {
        						open.add(3, child_left);
        					}
        				}
        			}else if(coordinate[3] == right) {
        				if(child_right.x >= 0 && child_right.x < world.getMaxWidth() &&
        						child_right.y >= 0 && child_right.y < world.getMaxWidth() &&
        						world.isPassable(child_right.x, child_right.y)) {
        					if(!open.contains(child_right) && !closed.contains(child_right) ) {
        						open.add(3, child_right);
        					}
        				}
        			}else if(coordinate[3] == up) {
        				if(child_up.x >= 0 && child_up.x < world.getMaxWidth() &&
        						child_up.y >= 0 && child_up.y < world.getMaxWidth() &&
        						world.isPassable(child_up.x, child_up.y)) {
        					if(!open.contains(child_up) && !closed.contains(child_up) ) {
        						open.add(3, child_up);
        					}
        				}
        			}else if(coordinate[3] == down) {
        				if(child_down.x >= 0 && child_down.x < world.getMaxWidth() &&
        						child_down.y >= 0 && child_down.y < world.getMaxWidth() &&
        						world.isPassable(child_down.x, child_down.y)) {
        					if(!open.contains(child_down) && !closed.contains(child_down) ) {
        						open.add(3, child_down);
        					}
        				}
        			}
        		
        		}
        	}
    	}
    	catch(OutOfThisWorldException o)
    	{
    		System.out.println("Invalid location");

    	}
    	return new ArrayList<Point>(path);
    }
    public void sort(int [] arr, int n) {
    	int i, j, min_idx;
    	 
        // One by one move boundary of unsorted sub array
        for (i = 0; i < n-1; i++)
        {
            // Find the minimum element in unsorted array
            min_idx = i;
            for (j = i+1; j < n; j++)
              if (arr[j] < arr[min_idx])
                min_idx = j;
     
            // Swap the found minimum element with the first element
            int temp = arr[i];
            arr[i] = arr[min_idx];
            arr[min_idx] = temp;
                  }
    }
    
  

	/**
     * Controller for the agent's behavior
     */
    public void action()
    {
    	// Creates a Point object to specify the start location. The x and y
    	// coordinates are the ship's location
    	Point startLocation = new Point(ship.getX(), ship.getY());
    	
    	// Create a Point object to specify the end location.
    	// world.getTargets() retrieves an ArrayList of Point objects
    	// .get(0) retrieves the first object in the ArrayList. There is 
    	//		only 1 target in the map so this is what's returned
    	// .x and .y are attributes of a Point object, which store the x and y location of the target    	
    	Point endLocation = new Point(world.getTargets().get(0).x-1, world.getTargets().get(0).y);
    	
    	// Retrieve the path from the start to end location (currently these are dummy variables)
    	ArrayList<Point> path = getPath(startLocation, endLocation);
    	
    	for(Point p : path)
    	{
    		sailTo(p);
    	}
    }

    /**
     * Moves a ship closer to the given x and y coordinate
     * @param x
     * @param y
     */
    public void sailTo(Point loc)
    {               
        //Keep moving toward the x,y location
        if(ship.getX()>loc.x)
       	 ship.moveLeft();
    	else
       	 if(ship.getX()<loc.x)
       		 ship.moveRight();
        	else
            	if(ship.getY()>loc.y)
       	     	ship.moveUp();
            	else
       			 if(ship.getY()<loc.y)
                   	 ship.moveDown();
    
    }
}
